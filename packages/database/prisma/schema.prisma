datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"


}

model Address {
  id          Int       @id @default(autoincrement())
  city        String
  street      String
  state       String?
  zip         String
  countryCode String    @map("country_code")
  country     Country   @relation(name: "addressesTocountries", fields: [countryCode], references: [isoCode])
  contacts    Contact[] @relation(name: "addressesTocontacts")

  @@map("addresses")

}

model BusinessProfession {
  businessId   Int        @map("business_id")
  professionId Int        @map("profession_id")
  business     Business   @relation(name: "business_professionsTobusinesses", fields: [businessId], references: [id])
  profession   Profession @relation(name: "business_professionsToprofessions", fields: [professionId], references: [id])

  @@map("business_professions")
  @@id([businessId, professionId])
}

model Business {
  id                  Int                  @id @default(autoincrement())
  name                String
  registrationNumber  String               @map("registration_number")
  businessProfessions BusinessProfession[] @relation(name: "business_professionsTobusinesses")
  contractors         Contractor[]         @relation(name: "businessesTocontractors")

  @@map("businesses")

}

model Client {
  id        Int        @id @default(autoincrement())
  personId  Int        @map("person_id")
  person    Person     @relation(name: "clientsTopeople", fields: [personId], references: [id])
  contracts Contract[] @relation(name: "clientsTocontracts")

  @@map("clients")

}

model Comment {
  id                  Int                  @id @default(autoincrement())
  content             String
  createdAt           DateTime?            @default(now()) @map("created_at")
  updatedAt           DateTime?            @default(now()) @updatedAt @map("updated_at")
  authorId            Int                  @map("author_id")
  user                User                 @relation(name: "commentsTousers", fields: [authorId], references: [id])
  contractComments    ContractComment[]    @relation(name: "commentsTocontract_comments")
  subcontractComments SubcontractComment[] @relation(name: "commentsTosubcontract_comments")

  @@map("comments")

}

model Contact {
  createdById    Int?            @map("created_by_id")
  updatedById    Int?            @map("updated_by_id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  id             Int             @id @default(autoincrement())
  email          String?
  phone          String?
  note           String?
  addressId      Int?            @map("address_id")
  address        Address?        @relation(name: "addressesTocontacts", fields: [addressId], references: [id])
  personContacts PersonContact[] @relation(name: "contactsToperson_contacts")

  @@map("contacts")

}

model ContactsChange {
  logId       Int       @id @default(autoincrement()) @map("log_id")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted   Boolean?  @default(false) @map("is_deleted")
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @map("created_at")
  id          Int
  email       String?
  phone       String?
  note        String?
  addressId   Int?      @map("address_id")

  @@map("contacts_changes")

}

model ContractComment {
  contractId Int      @map("contract_id")
  commentId  Int      @map("comment_id")
  comment    Comment  @relation(name: "commentsTocontract_comments", fields: [commentId], references: [id])
  contract   Contract @relation(name: "contract_commentsTocontracts", fields: [contractId], references: [id])

  @@map("contract_comments")
  @@id([contractId, commentId])
}

model ContractFile {
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @default(now()) @map("created_at")
  contractId  Int       @map("contract_id")
  fileId      Int       @map("file_id")
  contract    Contract  @relation(name: "contract_filesTocontracts", fields: [contractId], references: [id])
  file        File      @relation(name: "contract_filesTofiles", fields: [fileId], references: [id])

  @@map("contract_files")
  @@id([contractId, fileId])
}

model ContractFilesChange {
  logId       Int       @id @default(autoincrement()) @map("log_id")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted   Boolean?  @default(false) @map("is_deleted")
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @map("created_at")
  contractId  Int       @map("contract_id")
  fileId      Int       @map("file_id")

  @@map("contract_files_changes")

}

model ContractLevel {
  createdById       Int?               @map("created_by_id")
  updatedById       Int?               @map("updated_by_id")
  createdAt         DateTime?          @default(now()) @map("created_at")
  id                Int                @id @default(autoincrement())
  contractId        Int?               @map("contract_id")
  levelId           Int?               @map("level_id")
  startAt           DateTime?          @default(now()) @map("start_at")
  deadlineAt        DateTime           @map("deadline_at")
  isDone            Boolean?           @default(false) @map("is_done")
  contract          Contract?          @relation(name: "contract_levelsTocontracts", fields: [contractId], references: [id])
  level             Level?             @relation(name: "contract_levelsTolevels", fields: [levelId], references: [id])
  subcontractLevels SubcontractLevel[] @relation(name: "contract_levelsTosubcontract_levels")
  @@unique([contractId, levelId])
  @@map("contract_levels")

}

model ContractLevelsChange {
  logId       Int       @id @default(autoincrement()) @map("log_id")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted   Boolean?  @default(false) @map("is_deleted")
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @map("created_at")
  id          Int
  contractId  Int?      @map("contract_id")
  levelId     Int?      @map("level_id")
  startAt     DateTime? @map("start_at")
  deadlineAt  DateTime  @map("deadline_at")
  isDone      Boolean?  @map("is_done")

  @@map("contract_levels_changes")

}

model Contractor {
  createdById  Int?          @map("created_by_id")
  updatedById  Int?          @map("updated_by_id")
  createdAt    DateTime?     @default(now()) @map("created_at")
  id           Int           @id @default(autoincrement())
  personId     Int?          @map("person_id")
  businessId   Int?          @map("business_id")
  business     Business?     @relation(name: "businessesTocontractors", fields: [businessId], references: [id])
  person       Person?       @relation(name: "contractorsTopeople", fields: [personId], references: [id])
  subcontracts Subcontract[] @relation(name: "contractorsTosubcontracts")

  @@map("contractors")

}

model ContractorsChange {
  logId       Int       @id @default(autoincrement()) @map("log_id")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted   Boolean?  @default(false) @map("is_deleted")
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @map("created_at")
  id          Int
  personId    Int?      @map("person_id")
  businessId  Int?      @map("business_id")

  @@map("contractors_changes")

}

model Contract {
  createdById       Int?              @map("created_by_id")
  updatedById       Int?              @map("updated_by_id")
  createdAt         DateTime?         @default(now()) @map("created_at")
  id                Int               @id @default(autoincrement())
  code              String            @unique
  startAt           DateTime?         @default(now()) @map("start_at")
  deadlineAt        DateTime          @map("deadline_at")
  name              String
  description       String?
  isDone            Boolean?          @default(false) @map("is_done")
  priceId           Int               @map("price_id")
  responsibleUserId Int               @map("responsible_user_id")
  clientId          Int               @map("client_id")
  client            Client            @relation(name: "clientsTocontracts", fields: [clientId], references: [id])
  monetaryValue     MonetaryValue     @relation(name: "contractsTomonetary_values", fields: [priceId], references: [id])
  user              User              @relation(name: "contractsTousers", fields: [responsibleUserId], references: [id])
  contractComments  ContractComment[] @relation(name: "contract_commentsTocontracts")
  contractFiles     ContractFile[]    @relation(name: "contract_filesTocontracts")
  contractLevels    ContractLevel[]   @relation(name: "contract_levelsTocontracts")
  expenses          Expense[]         @relation(name: "contractsToexpenses")
  workLogs          WorkLog[]         @relation(name: "contractsTowork_logs")

  @@map("contracts")

}

model ContractsChange {
  logId             Int       @id @default(autoincrement()) @map("log_id")
  updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted         Boolean?  @default(false) @map("is_deleted")
  createdById       Int?      @map("created_by_id")
  updatedById       Int?      @map("updated_by_id")
  createdAt         DateTime? @map("created_at")
  id                Int
  code              String
  startAt           DateTime? @map("start_at")
  deadlineAt        DateTime  @map("deadline_at")
  name              String
  description       String?
  isDone            Boolean?  @map("is_done")
  priceId           Int       @map("price_id")
  responsibleUserId Int       @map("responsible_user_id")
  clientId          Int       @map("client_id")

  @@map("contracts_changes")

}

model Country {
  isoCode   String    @id @map("iso_code")
  addresses Address[] @relation(name: "addressesTocountries")

  @@map("countries")

}

model Currency {
  isoCode        String          @id @map("iso_code")
  monetaryValues MonetaryValue[] @relation(name: "currenciesTomonetary_values")

  @@map("currencies")

}

model Expense {
  id            Int           @id @default(autoincrement())
  description   String
  amountId      Int           @map("amount_id")
  authorId      Int           @map("author_id")
  contractId    Int?          @map("contract_id")
  monetaryValue MonetaryValue @relation(name: "expensesTomonetary_values", fields: [amountId], references: [id])
  user          User          @relation(name: "expensesTousers", fields: [authorId], references: [id])
  contract      Contract?     @relation(name: "contractsToexpenses", fields: [contractId], references: [id])

  @@map("expenses")

}

model File {
  id               Int               @id @default(autoincrement())
  name             String
  hash             String
  blurhash         String?
  createdAt        DateTime?         @default(now()) @map("created_at")
  type             String
  authorId         Int               @map("author_id")
  user             User              @relation(name: "filesTousers", fields: [authorId], references: [id])
  mimeType         MimeType          @relation(name: "filesTomime_types", fields: [type], references: [name])
  contractFiles    ContractFile[]    @relation(name: "contract_filesTofiles")
  subcontractFiles SubcontractFile[] @relation(name: "filesTosubcontract_files")

  @@map("files")

}

model GroupPermission {
  groupId      Int        @map("group_id")
  permissionId Int        @map("permission_id")
  group        Group      @relation(name: "group_permissionsTogroups", fields: [groupId], references: [id])
  permission   Permission @relation(name: "group_permissionsTopermissions", fields: [permissionId], references: [id])

  @@map("group_permissions")
  @@id([groupId, permissionId])
}

model GroupUser {
  userId  Int   @map("user_id")
  groupId Int   @map("group_id")
  group   Group @relation(name: "group_usersTogroups", fields: [groupId], references: [id])
  user    User  @relation(name: "group_usersTousers", fields: [userId], references: [id])

  @@map("group_users")
  @@id([userId, groupId])
}

model Group {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  groupPermissions GroupPermission[] @relation(name: "group_permissionsTogroups")
  groupUsers       GroupUser[]       @relation(name: "group_usersTogroups")

  @@map("groups")

}

model Level {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  contractLevels ContractLevel[] @relation(name: "contract_levelsTolevels")

  @@map("levels")

}

model LogTable {
  logId     Int       @id @default(autoincrement()) @map("log_id")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean?  @default(false) @map("is_deleted")

  @@map("log_table")

}

model MimeType {
  name  String @id
  files File[] @relation(name: "filesTomime_types")

  @@map("mime_types")

}

model MonetaryValue {
  id           Int           @id @default(autoincrement())
  amount       Float
  createdAt    DateTime      @map("created_at")
  currencyCode String        @map("currency_code")
  currency     Currency      @relation(name: "currenciesTomonetary_values", fields: [currencyCode], references: [isoCode])
  contracts    Contract[]    @relation(name: "contractsTomonetary_values")
  expenses     Expense[]     @relation(name: "expensesTomonetary_values")
  subcontracts Subcontract[] @relation(name: "monetary_valuesTosubcontracts")
  wages        Wage[]        @relation(name: "monetary_valuesTowages")

  @@map("monetary_values")

}

model Person {
  id             Int             @id @default(autoincrement())
  name           String
  clients        Client[]        @relation(name: "clientsTopeople")
  contractors    Contractor[]    @relation(name: "contractorsTopeople")
  personContacts PersonContact[] @relation(name: "peopleToperson_contacts")
  users          User[]          @relation(name: "peopleTousers")

  @@map("people")

}

model Permission {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  bit              Int
  groupPermissions GroupPermission[] @relation(name: "group_permissionsTopermissions")

  @@map("permissions")

}

model PersonContact {
  personId  Int     @map("person_id")
  contactId Int     @map("contact_id")
  contact   Contact @relation(name: "contactsToperson_contacts", fields: [contactId], references: [id])
  person    Person  @relation(name: "peopleToperson_contacts", fields: [personId], references: [id])

  @@map("person_contacts")
  @@id([personId, contactId])
}

model Profession {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  businessProfessions BusinessProfession[] @relation(name: "business_professionsToprofessions")

  @@map("professions")

}

model SubcontractComment {
  subcontractId Int         @map("subcontract_id")
  commentId     Int         @map("comment_id")
  comment       Comment     @relation(name: "commentsTosubcontract_comments", fields: [commentId], references: [id])
  subcontract   Subcontract @relation(name: "subcontract_commentsTosubcontracts", fields: [subcontractId], references: [id])

  @@map("subcontract_comments")
  @@id([subcontractId, commentId])
}

model SubcontractFile {
  createdById   Int?        @map("created_by_id")
  updatedById   Int?        @map("updated_by_id")
  createdAt     DateTime?   @default(now()) @map("created_at")
  subcontractId Int         @map("subcontract_id")
  fileId        Int         @map("file_id")
  file          File        @relation(name: "filesTosubcontract_files", fields: [fileId], references: [id])
  subcontract   Subcontract @relation(name: "subcontract_filesTosubcontracts", fields: [subcontractId], references: [id])

  @@map("subcontract_files")
  @@id([subcontractId, fileId])
}

model SubcontractFilesChange {
  logId         Int       @id @default(autoincrement()) @map("log_id")
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted     Boolean?  @default(false) @map("is_deleted")
  createdById   Int?      @map("created_by_id")
  updatedById   Int?      @map("updated_by_id")
  createdAt     DateTime? @map("created_at")
  subcontractId Int       @map("subcontract_id")
  fileId        Int       @map("file_id")

  @@map("subcontract_files_changes")

}

model SubcontractLevel {
  createdById     Int?           @map("created_by_id")
  updatedById     Int?           @map("updated_by_id")
  createdAt       DateTime?      @default(now()) @map("created_at")
  id              Int            @id @default(autoincrement())
  contractLevelId Int?           @map("contract_level_id")
  subcontractId   Int?           @map("subcontract_id")
  contractLevel   ContractLevel? @relation(name: "contract_levelsTosubcontract_levels", fields: [contractLevelId], references: [id])
  subcontract     Subcontract?   @relation(name: "subcontract_levelsTosubcontracts", fields: [subcontractId], references: [id])
  @@unique([contractLevelId, subcontractId])
  @@map("subcontract_levels")

}

model SubcontractLevelsChange {
  logId           Int       @id @default(autoincrement()) @map("log_id")
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted       Boolean?  @default(false) @map("is_deleted")
  createdById     Int?      @map("created_by_id")
  updatedById     Int?      @map("updated_by_id")
  createdAt       DateTime? @map("created_at")
  id              Int
  contractLevelId Int?      @map("contract_level_id")
  subcontractId   Int?      @map("subcontract_id")

  @@map("subcontract_levels_changes")

}

model Subcontract {
  createdById         Int?                 @map("created_by_id")
  updatedById         Int?                 @map("updated_by_id")
  createdAt           DateTime?            @default(now()) @map("created_at")
  id                  Int                  @id @default(autoincrement())
  startAt             DateTime?            @default(now()) @map("start_at")
  deadlineAt          DateTime             @map("deadline_at")
  name                String?
  description         String?
  isDone              Boolean?             @default(false) @map("is_done")
  priceId             Int                  @map("price_id")
  contractorId        Int                  @map("contractor_id")
  contractor          Contractor           @relation(name: "contractorsTosubcontracts", fields: [contractorId], references: [id])
  monetaryValue       MonetaryValue        @relation(name: "monetary_valuesTosubcontracts", fields: [priceId], references: [id])
  subcontractComments SubcontractComment[] @relation(name: "subcontract_commentsTosubcontracts")
  subcontractFiles    SubcontractFile[]    @relation(name: "subcontract_filesTosubcontracts")
  subcontractLevels   SubcontractLevel[]   @relation(name: "subcontract_levelsTosubcontracts")

  @@map("subcontracts")

}

model SubcontractsChange {
  logId        Int       @id @default(autoincrement()) @map("log_id")
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted    Boolean?  @default(false) @map("is_deleted")
  createdById  Int?      @map("created_by_id")
  updatedById  Int?      @map("updated_by_id")
  createdAt    DateTime? @map("created_at")
  id           Int
  startAt      DateTime? @map("start_at")
  deadlineAt   DateTime  @map("deadline_at")
  name         String?
  description  String?
  isDone       Boolean?  @map("is_done")
  priceId      Int       @map("price_id")
  contractorId Int       @map("contractor_id")

  @@map("subcontracts_changes")

}

model User {
  id           Int         @id @default(autoincrement())
  username     String      @unique
  passwordHash String      @map("password_hash")
  personId     Int         @map("person_id")
  person       Person      @relation(name: "peopleTousers", fields: [personId], references: [id])
  comments     Comment[]   @relation(name: "commentsTousers")
  contracts    Contract[]  @relation(name: "contractsTousers")
  expenses     Expense[]   @relation(name: "expensesTousers")
  files        File[]      @relation(name: "filesTousers")
  groupUsers   GroupUser[] @relation(name: "group_usersTousers")
  wages        Wage[]      @relation(name: "usersTowages")

  @@map("users")

}

model Wage {
  createdById   Int?          @map("created_by_id")
  updatedById   Int?          @map("updated_by_id")
  createdAt     DateTime?     @default(now()) @map("created_at")
  id            Int           @id @default(autoincrement())
  wageId        Int           @map("wage_id")
  employeeId    Int           @map("employee_id")
  user          User          @relation(name: "usersTowages", fields: [employeeId], references: [id])
  monetaryValue MonetaryValue @relation(name: "monetary_valuesTowages", fields: [wageId], references: [id])

  @@map("wages")

}

model WorkLog {
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @default(now()) @map("created_at")
  id          Int       @id @default(autoincrement())
  startedAt   DateTime  @map("started_at")
  endedAt     DateTime  @map("ended_at")
  contractId  Int?      @map("contract_id")
  contract    Contract? @relation(name: "contractsTowork_logs", fields: [contractId], references: [id])

  @@map("work_logs")

}

model WorkLogsChange {
  logId       Int       @id @default(autoincrement()) @map("log_id")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")
  isDeleted   Boolean?  @default(false) @map("is_deleted")
  createdById Int?      @map("created_by_id")
  updatedById Int?      @map("updated_by_id")
  createdAt   DateTime? @map("created_at")
  id          Int
  startedAt   DateTime  @map("started_at")
  endedAt     DateTime  @map("ended_at")
  contractId  Int?      @map("contract_id")

  @@map("work_logs_changes")

}